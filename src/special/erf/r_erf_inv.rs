//**********************************************************************
// This file is part of sci-rs                                         *
// Copyright 2023 Matthew R. Hennefarth                                *
//**********************************************************************

use crate::special::eval_poly;
use num_traits::Float;

pub(crate) trait RealErfInvConsts: Sized {
    const Y: [Self; 7];
    const P_0: [Self; 8];
    const Q_0: [Self; 10];
    const P_1: [Self; 9];
    const Q_1: [Self; 9];
    const P_2: [Self; 11];
    const Q_2: [Self; 8];
    const P_3: [Self; 9];
    const Q_3: [Self; 7];
    const P_4: [Self; 9];
    const Q_4: [Self; 7];
    const P_5: [Self; 8];
    const Q_5: [Self; 7];
    const P_6: [Self; 8];
    const Q_6: [Self; 7];
}

macro_rules! impl_realerfinvconsts {
    ($($T: ty)*) => ($(
        impl RealErfInvConsts for $T {
            const Y: [Self; 7] = [
                0.0891314744949340820313,
                2.249481201171875,
                0.807220458984375,
                0.93995571136474609375,
                0.98362827301025390625,
                0.99714565277099609375,
                0.99941349029541015625
            ];
            const P_0: [Self; 8] = [
                -0.00538772965071242932965,
                0.00822687874676915743155,
                0.0219878681111168899165,
                -0.0365637971411762664006,
                -0.0126926147662974029034,
                0.0334806625409744615033,
                -0.00836874819741736770379,
                -0.000508781949658280665617,
            ];
            const Q_0: [Self; 10] = [
                0.000886216390456424707504,
                -0.00233393759374190016776,
                0.0795283687341571680018,
                -0.0527396382340099713954,
                -0.71228902341542847553,
                0.662328840472002992063,
                1.56221558398423026363,
                -1.56574558234175846809,
                -0.970005043303290640362,
                1.0,
            ];
            const P_1: [Self; 9] = [
                -3.67192254707729348546,
                21.1294655448340526258,
                17.445385985570866523,
                -44.6382324441786960818,
                -18.8510648058714251895,
                17.6447298408374015486,
                8.37050328343119927838,
                0.105264680699391713268,
                -0.202433508355938759655,
            ];
            const Q_1: [Self; 9] = [
                1.72114765761200282724,
                -22.6436933413139721736,
                10.8268667355460159008,
                48.5609213108739935468,
                -20.1432634680485188801,
                -28.6608180499800029974,
                3.9713437953343869095,
                6.24264124854247537712,
                1.0,
            ];
            const P_2: [Self; 11] = [
                -0.681149956853776992068e-9,
                0.285225331782217055858e-7,
                -0.679465575181126350155e-6,
                0.00214558995388805277169,
                0.0290157910005329060432,
                0.142869534408157156766,
                0.337785538912035898924,
                0.387079738972604337464,
                0.117030156341995252019,
                -0.163794047193317060787,
                -0.131102781679951906451,
            ];
            const Q_2: [Self; 8] = [
                0.01105924229346489121,
                0.152264338295331783612,
                0.848854343457902036425,
                2.59301921623620271374,
                4.77846592945843778382,
                5.38168345707006855425,
                3.46625407242567245975,
                1.0,
            ];
            const P_3: [Self; 9] = [
                0.266339227425782031962e-11,
                -0.230404776911882601748e-9,
                0.460469890584317994083e-5,
                0.000157544617424960554631,
                0.00187123492819559223345,
                0.00950804701325919603619,
                0.0185573306514231072324,
                -0.00222426529213447927281,
                -0.0350353787183177984712,
            ];
            const Q_3: [Self; 7] = [
                0.764675292302794483503e-4,
                0.00263861676657015992959,
                0.0341589143670947727934,
                0.220091105764131249824,
                0.762059164553623404043,
                1.3653349817554063097,
                1.0,
            ];
            const P_4: [Self; 9] = [
                0.99055709973310326855e-16,
                -0.281128735628831791805e-13,
                0.462596163522878599135e-8,
                0.449696789927706453732e-6,
                0.149624783758342370182e-4,
                0.000209386317487588078668,
                0.00105628862152492910091,
                -0.00112951438745580278863,
                -0.0167431005076633737133,
            ];
            const Q_4: [Self; 7] = [
                0.282243172016108031869e-6,
                0.275335474764726041141e-4,
                0.000964011807005165528527,
                0.0160746087093676504695,
                0.138151865749083321638,
                0.591429344886417493481,
                1.0,
            ];
            const P_5: [Self; 8] = [
                -0.116765012397184275695e-17,
                0.145596286718675035587e-11,
                0.411632831190944208473e-9,
                0.396341011304801168516e-7,
                0.162397777342510920873e-5,
                0.254723037413027451751e-4,
                -0.779190719229053954292e-5,
                -0.0024978212791898131227,
            ];
            const Q_5: [Self; 7] = [
                0.509761276599778486139e-9,
                0.144437756628144157666e-6,
                0.145007359818232637924e-4,
                0.000690538265622684595676,
                0.0169410838120975906478,
                0.207123112214422517181,
                1.0,
            ];
            const P_6: [Self; 8] = [
                -0.348890393399948882918e-21,
                0.135880130108924861008e-14,
                0.947846627503022684216e-12,
                0.225561444863500149219e-9,
                0.229345859265920864296e-7,
                0.899465114892291446442e-6,
                -0.28398759004727721098e-6,
                -0.000539042911019078575891,
            ];
            const Q_6: [Self; 7] = [
                0.231558608310259605225e-11,
                0.161809290887904476097e-8,
                0.399968812193862100054e-6,
                0.468292921940894236786e-4,
                0.00282092984726264681981,
                0.0845746234001899436914,
                1.0,
            ];
        }
)*)
}

impl_realerfinvconsts! {f32 f64}

/// Inverse error function implementation. Taken from [Boost].
///
/// [Boost]: https://www.boost.org/doc/libs/1_82_0/boost/math/special_functions/detail/erf_inv.hpp
fn r_erf_inv_impl<T>(p: T, q: T) -> T
where
    T: Float + RealErfInvConsts,
{
    if p <= T::from(0.5).unwrap() {
        let g = p * (p + T::from(10.0).unwrap());
        return g * T::Y[0] + g * (eval_poly(p, &T::P_0) / eval_poly(p, &T::Q_0));
    } else if q >= T::from(0.25).unwrap() {
        let g = (-T::from(2.0).unwrap() * q.ln()).sqrt();
        let xs = q - T::from(0.25).unwrap();
        return g / (T::Y[1] + eval_poly(xs, &T::P_1) / eval_poly(xs, &T::Q_1));
    }

    let x = (-q.ln()).sqrt();
    return if x < T::from(3.0).unwrap() {
        let xs = x - T::from(1.125).unwrap();
        T::Y[2] * x + x * (eval_poly(xs, &T::P_2) / eval_poly(xs, &T::Q_2))
    } else if x < T::from(6.0).unwrap() {
        let xs = x - T::from(3.0).unwrap();
        T::Y[3] * x + x * (eval_poly(xs, &T::P_3) / eval_poly(xs, &T::Q_3))
    } else if x < T::from(18.0).unwrap() {
        let xs = x - T::from(6.0).unwrap();
        T::Y[4] * x + x * (eval_poly(xs, &T::P_4) / eval_poly(xs, &T::Q_4))
    } else if x < T::from(44.0).unwrap() {
        let xs = x - T::from(18.0).unwrap();
        T::Y[5] * x + x * (eval_poly(xs, &T::P_5) / eval_poly(xs, &T::Q_5))
    } else {
        let xs = x - T::from(44.0).unwrap();
        T::Y[6] * x + x * (eval_poly(xs, &T::P_6) / eval_poly(xs, &T::Q_6))
    };
}

pub(crate) fn r_erf_inv<T>(x: T) -> T
where
    T: Float + RealErfInvConsts,
{
    if x < -T::one() || x > T::one() {
        panic!("Domain error");
    }
    if x.is_one() {
        return T::infinity();
    }
    if x == -T::one() {
        return T::neg_infinity();
    }
    if x.is_zero() {
        return T::zero();
    }

    if x.is_sign_negative() {
        -r_erf_inv_impl(-x, T::one() + x)
    } else {
        r_erf_inv_impl(x, T::one() - x)
    }
}

pub(crate) fn r_erfc_inv<T>(x: T) -> T
where
    T: Float + RealErfInvConsts,
{
    let two = T::from(2.0).unwrap();
    if x < T::zero() || x > two {
        panic!("Domain error");
    }
    if x.is_zero() {
        return T::infinity();
    }
    if x == two {
        return T::neg_infinity();
    }
    if x.is_one() {
        return T::zero();
    }

    if x > T::one() {
        -r_erf_inv_impl(x - T::one(), two - x)
    } else {
        r_erf_inv_impl(T::one() - x, x)
    }
}

#[cfg(test)]
#[rustfmt::skip]
mod tests{
    use super::*;
    
    const PRECISION: f64 = 1e-14;

    #[test]
    fn test_r_erf_inv() {
        assert_almost_eq!(r_erf_inv(0.5), 0.4769362762044698733814, PRECISION); // OEIS: A069286
    }

    #[test]
    fn test_r_erfc_inv() {

    }
}
